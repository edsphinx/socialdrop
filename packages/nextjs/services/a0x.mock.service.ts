import * as farcasterService from "./farcaster.service";
import { campaigns } from "@prisma/client";

// --- VERSIÃ“N MOCK (SIMULADA) DEL SERVICIO A0X ---
// Ãšsala mientras consigues tus claves de API para no detener el desarrollo.

const MOCK_AGENT_ID = "mock-agent-123";

async function mockPublish(text: string) {
  console.log("--- MOCK A0X ---");
  console.log(`Llamada para publicar el siguiente cast con el agente ${MOCK_AGENT_ID}:`);
  console.log(text);
  console.log("------------------");
  // Simulamos una respuesta exitosa
  return Promise.resolve({ success: true, hash: `0x_mock_hash_${Math.random()}` });
}

export async function announceCampaignStart(campaign: campaigns, frameUrl: string) {
  const text = `ðŸš€ Â¡Nueva campaÃ±a de Airdrop MÃ¡gico lanzada! âœ¨

"${campaign.name}" estÃ¡ en vivo.

InteractÃºa con el Frame para ver el progreso y cÃ³mo participar. Â¡Los NFTs se entregan automÃ¡ticamente! #SocialDrop #Base #Farcaster`;

  // Usamos el servicio de Farcaster para publicar, adjuntando el Frame
  return await farcasterService.publishCast(text, {
    embeds: [{ url: frameUrl }],
  });
}

export async function announceNewWinner(winnerUsername: string, campaignName: string) {
  const text = `ðŸ”¥ Â¡Boom! @${winnerUsername} acaba de recibir un NFT de la campaÃ±a "${campaignName}"! 

La magia estÃ¡ ocurriendo en tiempo real. Â¿QuiÃ©n serÃ¡ el siguiente? ðŸ‘€`;

  return await farcasterService.publishCast(text, { channelId: "socialdrop" });
}

export async function announceCampaignEnd(campaignName: string) {
  const text = `ðŸŽ‰ Â¡La campaÃ±a "${campaignName}" ha finalizado! ðŸŽ‰

Todos los NFTs han encontrado a sus dueÃ±os. Â¡Felicidades a todos los ganadores!`;

  return await mockPublish(text);
}
